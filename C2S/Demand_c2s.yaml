swagger: '2.0'
info:
  title: Demand API C2S - REST
  version: v2
schemes:
  - http
  - https
consumes:
  - application/json
produces:
  - application/json
paths:
  /demand.v2.c2s/offers:
    get:
      summary: |-
        *  Get ride offers based on a ride request. May take a few seconds. When no offers are available, returns an empty response.
        Errors:
        INVALID_ARGUMENT: Invalid field value. For example: prebook_pickup_time is in the past, route.pickup.lat is not a valid latitude, etc.
      operationId: GetRideOffers
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonRideOffersResponse'
      parameters:
        - name: route.pickup.point.lat
          description: Latitude.
          in: query
          required: false
          type: number
          format: double
        - name: route.pickup.point.lng
          description: Longitude.
          in: query
          required: false
          type: number
          format: double
        - name: route.pickup.address.country
          description: Localized country name.
          in: query
          required: false
          type: string
        - name: route.pickup.address.country_code
          description: ISO 3166-alpha-3 country code.
          in: query
          required: false
          type: string
        - name: route.pickup.address.state
          description: 'State (first subdivision level below the country, if relevant).'
          in: query
          required: false
          type: string
        - name: route.pickup.address.county
          description: 'County (second subdivision level below the country, if relevant).'
          in: query
          required: false
          type: string
        - name: route.pickup.address.city
          description: City/town.
          in: query
          required: false
          type: string
        - name: route.pickup.address.district
          description: District (subdivision level below the city).
          in: query
          required: false
          type: string
        - name: route.pickup.address.sub_district
          description: Sub-district (subdivision level below the district; e.g. commonly used in IND).
          in: query
          required: false
          type: string
        - name: route.pickup.address.street
          description: Street name.
          in: query
          required: false
          type: string
        - name: route.pickup.address.house_number
          description: 'House number; depending on regional characteristics, can also be house name.'
          in: query
          required: false
          type: string
        - name: route.pickup.address.postal_code
          description: Postal code (zipcode).
          in: query
          required: false
          type: string
        - name: route.pickup.address.building
          description: Building name; e.g. commonly used in HKG.
          in: query
          required: false
          type: string
        - name: route.pickup.address.line
          description: Formatted address lines.
          in: query
          required: false
          type: array
          items:
            type: string
        - name: route.pickup.free_text
          description: Place name or street address in a free text format.
          in: query
          required: false
          type: string
        - name: route.destination.point.lat
          description: Latitude.
          in: query
          required: false
          type: number
          format: double
        - name: route.destination.point.lng
          description: Longitude.
          in: query
          required: false
          type: number
          format: double
        - name: route.destination.address.country
          description: Localized country name.
          in: query
          required: false
          type: string
        - name: route.destination.address.country_code
          description: ISO 3166-alpha-3 country code.
          in: query
          required: false
          type: string
        - name: route.destination.address.state
          description: 'State (first subdivision level below the country, if relevant).'
          in: query
          required: false
          type: string
        - name: route.destination.address.county
          description: 'County (second subdivision level below the country, if relevant).'
          in: query
          required: false
          type: string
        - name: route.destination.address.city
          description: City/town.
          in: query
          required: false
          type: string
        - name: route.destination.address.district
          description: District (subdivision level below the city).
          in: query
          required: false
          type: string
        - name: route.destination.address.sub_district
          description: Sub-district (subdivision level below the district; e.g. commonly used in IND).
          in: query
          required: false
          type: string
        - name: route.destination.address.street
          description: Street name.
          in: query
          required: false
          type: string
        - name: route.destination.address.house_number
          description: 'House number; depending on regional characteristics, can also be house name.'
          in: query
          required: false
          type: string
        - name: route.destination.address.postal_code
          description: Postal code (zipcode).
          in: query
          required: false
          type: string
        - name: route.destination.address.building
          description: Building name; e.g. commonly used in HKG.
          in: query
          required: false
          type: string
        - name: route.destination.address.line
          description: Formatted address lines.
          in: query
          required: false
          type: array
          items:
            type: string
        - name: route.destination.free_text
          description: Place name or street address in a free text format.
          in: query
          required: false
          type: string
        - name: constraints.passengers_no
          description: The number of passengers (1 or more).
          in: query
          required: false
          type: integer
          format: int64
        - name: constraints.suitcases_no
          description: The number of suitcases (0 or more).
          in: query
          required: false
          type: integer
          format: int64
        - name: prebook_pickup_time_ms
          description: |-
            FUTURE FEATURE, CURRENTLY UNSUPPORTED: Optional. A future pickup time, which is at least 30 minutes after the request time.
            An empty value indicates a request for an immediate ride.
          in: query
          required: false
          type: string
          format: uint64
        - name: price_range.lower_bound
          description: 'The range’s lower limit, for example: "12.5", "12", etc. Unsigned.'
          in: query
          required: false
          type: string
        - name: price_range.upper_bound
          description: 'The range’s upper limit, for example: "12.5", "12", etc. Unsigned.'
          in: query
          required: false
          type: string
        - name: price_range.currency_code
          description: 'The price currency. An ISO 4217 Currency Code, for example: "USD", "EUR", "JPY".'
          in: query
          required: false
          type: string
        - name: sort_type
          description: |-
            FUTURE FEATURE, CURRENTLY UNSUPPORTED: Optional. How to sort the RideOffers, by price or by ETA.
            (The Marketplace default sort order is by best price, and then minimal ETA.).

             - BY_PRICE: Sort by price (lowest price first)
             - BY_ETA: Sort by arrival time (earliest arrival time first)
          in: query
          required: false
          type: string
          enum:
            - UNKNOWN_SORT_TYPE
            - BY_PRICE
            - BY_ETA
          default: UNKNOWN_SORT_TYPE
        - name: passenger_note
          description: Optional. A free text note from the passenger.
          in: query
          required: false
          type: string
        - name: app_id
          description: Optional. The ID of the app.
          in: query
          required: false
          type: string
        - name: transit_options.max_transfers
          description: Optional. Maximum number of changes or transfers allowed in a route. Default is unlimited. Range is 0-6.
          in: query
          required: false
          type: integer
          format: int32
        - name: transit_options.max_walking_distance_meters
          description: Optional. Specifies a maximum walking distance in meters. Default is 2000. Range is 0-6000.
          in: query
          required: false
          type: integer
          format: int32
        - name: transit_options.locale
          description: Optional. The client's locale. Complies with the ISO 639-1 standard and defaults to en.
          in: query
          required: false
          type: string
      tags:
        - C2SDemandApi
  /demand.v2.c2s/publictransport:
    post:
      summary: Notify the marketplace that a public transportation offer was chosen
      operationId: CreatePublicTransportRide
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonEmpty'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/c2sCreatePublicTransportRideRequest'
      tags:
        - C2SDemandApi
  /demand.v2.c2s/rides:
    get:
      summary: |-
        * Get rides for the current user.
        Returns rides that were updated recently (in the last 3 hours, or after the given from_update_time).
      operationId: GetRides
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonRideQueryResponse'
      parameters:
        - name: query.from_time_ms
          description: |-
            Optional. Filters rides according to update or creation time (depending on the sort type).
            When the sort is UPDATE_TIME_ASC, returns rides UPDATED AFTER this time.
            When the sort is UPDATE_TIME_DESC, returns rides UPDATED BEFORE this time.
            When the sort is CREATE_TIME_ASC, returns rides CREATED AFTER this time.
            When the sort is CREATE_TIME_DESC, return rides CREATED BEFORE this time.

            Default value for ascending sort orders is NOW-3 hours.
            Default value for descending sort orders is NOW.
            This value is in UTC (milliseconds since Epoch time)
          in: query
          required: false
          type: string
          format: uint64
        - name: query.limit
          description: 'Optional. The maximal number of rides to return. When not set, the default is 200.'
          in: query
          required: false
          type: integer
          format: int64
        - name: query.status_filter
          description: |-
            Optional. Return only rides with the given status. When not set, rides with all statuses are returned.

             - UNKNOWN_RIDE_STATUS_FILTER: Unknown ride status
             - PAST: Terminated rides (includes the statuses: COMPLETED, REJECTED or CANCELLED), for the last 72 hours.
             - FUTURE: Pre-booked rides in status PROCESSING or ACCEPTED.
             - ONGOING: Ongoing rides (all rides other than PAST and FUTURE)
             - ALL: All rides
          in: query
          required: false
          type: string
          enum:
            - UNKNOWN_RIDE_STATUS_FILTER
            - PAST
            - FUTURE
            - ONGOING
            - ALL
          default: UNKNOWN_RIDE_STATUS_FILTER
        - name: query.sort_by
          description: |-
            Optional. Default is UPDATE_TIME_ASC.

             - UNKNOWN_SORT_TYPE: Unknown sort order
             - UPDATE_TIME_ASC: Ascending order of update time
             - UPDATE_TIME_DESC: Descending order of update time
             - CREATE_TIME_ASC: Ascending order of creation time
             - CREATE_TIME_DESC: Descending order of creation time
          in: query
          required: false
          type: string
          enum:
            - UNKNOWN_SORT_TYPE
            - UPDATE_TIME_ASC
            - UPDATE_TIME_DESC
            - CREATE_TIME_ASC
            - CREATE_TIME_DESC
          default: UNKNOWN_SORT_TYPE
        - name: app_id
          description: Optional. The ID of the app to get the rides for.
          in: query
          required: false
          type: string
      tags:
        - C2SDemandApi
    post:
      summary: '* Create a new ride based on an offer ID. If the offer is valid, a ride is returned immediately with the status PROCESSING.'
      description: |-
        Errors:
        NOT_FOUND: The offer ID is expired or does not exist
        ALREADY_EXISTS: A booking already exists for this offer ID (call GetRideOffers to receive new offer IDs).
      operationId: CreateRide
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonRide'
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/c2sCreateRideRequest'
      tags:
        - C2SDemandApi
  '/demand.v2.c2s/rides/{ride_id}':
    get:
      summary: |-
        * Get a ride by ID. Use this call to poll for the ride status (every 10 seconds).
        NOTE: The status of closed rides (COMPLETED, CANCELLED, REJECTED) never changes.
        Errors: 
        NOT_FOUND: Ride does not exist
      operationId: GetRide
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonRide'
      parameters:
        - name: ride_id
          in: path
          required: true
          type: string
      tags:
        - C2SDemandApi
  '/demand.v2.c2s/rides/{ride_id}/cancel':
    put:
      summary: |-
        * Cancel a ride. Returns immediately without waiting for a response from the supplier.
        Errors:
        NOT_FOUND: Ride does not exist
        FAILED_PRECONDITION: Cancel is not allowed by policy, or because the status is REJECTED, COMPLETED, or CANCELLED.
      operationId: CancelRide
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonEmpty'
      parameters:
        - name: ride_id
          in: path
          required: true
          type: string
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/c2sCancelRideRequest'
      tags:
        - C2SDemandApi
  '/demand.v2.c2s/rides/{ride_id}/location':
    get:
      summary: |-
        Returns the geo-location of the ride. Use this call to poll for the ride location (every 10 seconds)
        NOTES:
        Test the flag Ride.status_log.is_ride_location_available, to learn whether ride locations are supported.
        Rides which are closed (COMPLETED, CANCELLED, REJECTED) never change their location.
        Errors:
        NOT_FOUND: Ride does not exist
      operationId: GetRideLocationAndEta
      responses:
        '200':
          description: ''
          schema:
            $ref: '#/definitions/commonRideLocation'
      parameters:
        - name: ride_id
          in: path
          required: true
          type: string
      tags:
        - C2SDemandApi
definitions:
  CancellationInfoParty:
    type: string
    enum:
      - UNKNOWN
      - DEMANDER
      - SUPPLIER
    default: UNKNOWN
    title: |-
      - UNKNOWN: The cancelling party is unknown
       - DEMANDER: The client cancelled the ride
       - SUPPLIER: The supplier cancelled the ride
  PublicTransportRouteLegPublicTransportMode:
    type: string
    enum:
      - UNKNOWN_PUBLIC_TRANSPORT_MODE
      - HIGH_SPEED_TRAIN
      - INTERCITY_TRAIN
      - INTER_REGIONAL_TRAIN
      - REGIONAL_TRAIN
      - CITY_TRAIN
      - BUS
      - FERRY
      - SUBWAY
      - LIGHT_RAIL
      - PRIVATE_BUS
      - INCLINED
      - AERIAL
      - BUS_RAPID
      - MONORAIL
      - WALK
    default: UNKNOWN_PUBLIC_TRANSPORT_MODE
    title: |-
      - UNKNOWN_PUBLIC_TRANSPORT_MODE: Unknown
       - HIGH_SPEED_TRAIN: High-speed train
       - INTERCITY_TRAIN: Intercity/Euro-City train
       - INTER_REGIONAL_TRAIN: Inter-regional or fast train
       - REGIONAL_TRAIN: Regional train
       - CITY_TRAIN: City train
       - BUS: Bus
       - FERRY: Boat or ferry
       - SUBWAY: Subway/metro train
       - LIGHT_RAIL: Tram
       - PRIVATE_BUS: Privately-ordered bus or taxi
       - INCLINED: Inclined tram/funicular
       - AERIAL: Cable car
       - BUS_RAPID: Rapid bus
       - MONORAIL: Monorail
       - WALK: Walking
  RideOfferCancellationPolicy:
    type: string
    enum:
      - UNKNOWN_CANCEL_POLICY
      - ALLOWED
      - NOT_ALLOWED
    default: UNKNOWN_CANCEL_POLICY
    description: |-
      - UNKNOWN_CANCEL_POLICY: Unknown cancellation policy
       - ALLOWED: Cancellation by the client is allowed
       - NOT_ALLOWED: Cancellation by the client is not allowed
    title: '* Info about the ride cancellation policy'
  RideOfferTransitType:
    type: string
    enum:
      - UNKNOWN_TRANSIT_TYPE
      - TAXI
      - PUBLIC_TRANSPORT
    default: UNKNOWN_TRANSIT_TYPE
    title: |-
      - UNKNOWN_TRANSIT_TYPE: Unknown transit type
       - TAXI: Taxi ride
       - PUBLIC_TRANSPORT: Public transport ride
  RideQueryRideStatusFilter:
    type: string
    enum:
      - UNKNOWN_RIDE_STATUS_FILTER
      - PAST
      - FUTURE
      - ONGOING
      - ALL
    default: UNKNOWN_RIDE_STATUS_FILTER
    title: |-
      - UNKNOWN_RIDE_STATUS_FILTER: Unknown ride status
       - PAST: Terminated rides (includes the statuses: COMPLETED, REJECTED or CANCELLED), for the last 72 hours.
       - FUTURE: Pre-booked rides in status PROCESSING or ACCEPTED.
       - ONGOING: Ongoing rides (all rides other than PAST and FUTURE)
       - ALL: All rides
  VehicleVehicleType:
    type: string
    enum:
      - UNKNOWN
      - STANDARD
      - LIMO
      - VAN
      - OTHER
      - NOT_SUPPLIED
    default: UNKNOWN
    title: |-
      - STANDARD: Standard vehicle
       - LIMO: Limousine
       - VAN: Van
       - OTHER: Other vehicle
       - NOT_SUPPLIED: Vehicle type not supplied
  c2sCancelRideRequest:
    type: object
    properties:
      ride_id:
        type: string
        title: Mandatory. The unique ride ID
      cancel_reason:
        type: string
        description: Optional. Free text. The reason for the cancellation.
    title: '* A request to cancel a ride'
  c2sCreatePublicTransportRideRequest:
    type: object
    properties:
      offer_id:
        type: string
        title: Mandatory. An offer ID that was returned by GetRideOffers()
      passenger:
        $ref: '#/definitions/commonPassengerDetails'
        title: Mandatory. The passenger details at the time of booking
  c2sCreateRideRequest:
    type: object
    properties:
      offer_id:
        type: string
        title: Mandatory. An offer ID that was returned by GetRideOffers()
      passenger:
        $ref: '#/definitions/commonPassengerDetails'
        title: Mandatory. The passenger details at the time of booking
      subscribe_to_messages:
        type: boolean
        format: boolean
        title: DEPRECATED. Optional. Specifies if messages about the ride will be sent to the passenger. Default is false
      preferences:
        $ref: '#/definitions/commonRidePreferences'
        title: Optional. Preferences for the ride
    title: '* A request to create a new ride by offer ID'
  commonAddress:
    type: object
    properties:
      country:
        type: string
        title: Localized country name
      country_code:
        type: string
        title: ISO 3166-alpha-3 country code
      state:
        type: string
        title: 'State (first subdivision level below the country, if relevant)'
      county:
        type: string
        title: 'County (second subdivision level below the country, if relevant)'
      city:
        type: string
        title: City/town
      district:
        type: string
        title: District (subdivision level below the city)
      sub_district:
        type: string
        title: Sub-district (subdivision level below the district; e.g. commonly used in IND)
      street:
        type: string
        title: Street name
      house_number:
        type: string
        title: 'House number; depending on regional characteristics, can also be house name'
      postal_code:
        type: string
        title: Postal code (zipcode)
      building:
        type: string
        title: Building name; e.g. commonly used in HKG
      line:
        type: array
        items:
          type: string
        title: Formatted address lines
  commonBookingConstraints:
    type: object
    properties:
      passengers_no:
        type: integer
        format: int64
        title: The number of passengers (1 or more)
      suitcases_no:
        type: integer
        format: int64
        title: The number of suitcases (0 or more)
    description: '* A structure for defining the number of passengers and special requirements for the ride.'
  commonCancellationInfo:
    type: object
    properties:
      cancelling_party:
        $ref: '#/definitions/CancellationInfoParty'
        title: Which party canceled the ride
      cancel_reason:
        type: string
        title: The reason the ride was canceled (a free-text string)
      request_time_ms:
        type: string
        format: uint64
        title: The time the cancellation was requested
      status:
        $ref: '#/definitions/commonCancellationInfoStatus'
        title: The status of the cancellation request
    title: '* Information about a ride cancellation'
  commonCancellationInfoStatus:
    type: string
    enum:
      - UNKNOWN_STATUS
      - PROCESSING
      - ACCEPTED
      - REJECTED
    default: UNKNOWN_STATUS
    title: |-
      - UNKNOWN_STATUS: The cancellation status is unknown
       - PROCESSING: The cancellation request is being processed
       - ACCEPTED: The cancellation request is accepted
       - REJECTED: The cancellation request is rejected
  commonDriverDetails:
    type: object
    properties:
      name:
        type: string
        title: The driver’s first and last name
      phone_number:
        type: string
        title: The driver’s telephone number
      photo_url:
        type: string
        description: A URL pointing to the driver’s photo. This is mandatory in some countries.
      driving_license_id:
        type: string
        description: The driver’s driving license ID. This is mandatory in some countries.
    title: '* Driver information'
  commonEmpty:
    type: object
  commonPassengerDetails:
    type: object
    properties:
      name:
        type: string
        title: Mandatory. The passenger’s first and last name
      phone_number:
        type: string
        title: The passenger’s telephone number
      photo_url:
        type: string
        description: Optional. A URL pointing to the passenger’s photo.
      email:
        type: string
        title: Optional. The passenger's email address
    title: '* Passenger information'
  commonPoint:
    type: object
    properties:
      lat:
        type: number
        format: double
        title: Latitude
      lng:
        type: number
        format: double
        title: Longitude
    description: '* A point in the world, expressed as a {latitude, longitude) pair. Latitude values range from -180 to 180.'
  commonPrice:
    type: object
    properties:
      amount:
        type: string
        description: 'The price’s numeric amount in decimal format. For example "12.5", "12", etc. Unsigned.'
      currency_code:
        type: string
        description: 'The price currency. An ISO 4217 Currency Code, for example: "USD", "EUR", "JPY".'
    title: '* A price value'
  commonPriceEstimate:
    type: object
    properties:
      fixed:
        $ref: '#/definitions/commonPrice'
        title: A single fixed price amount
      range:
        $ref: '#/definitions/commonPriceRange'
        title: Lower and upper limits of a price range
    description: '* A price estimate for a ride. Contains only one field value: either a fixed price, or a price range.'
  commonPriceRange:
    type: object
    properties:
      lower_bound:
        type: string
        description: 'The range’s lower limit, for example: "12.5", "12", etc. Unsigned.'
      upper_bound:
        type: string
        description: 'The range’s upper limit, for example: "12.5", "12", etc. Unsigned.'
      currency_code:
        type: string
        title: 'The price currency. An ISO 4217 Currency Code, for example: "USD", "EUR", "JPY"'
    title: '* A price range. For example, the range $10.75-$12 is represented as: { from_amount: "10.75", to_amount: "12", currency_code: "USD"}'
  commonPublicTransportRouteLeg:
    type: object
    properties:
      mode:
        $ref: '#/definitions/PublicTransportRouteLegPublicTransportMode'
        title: Type of transportation for the leg
      duration_ms:
        type: string
        format: uint64
        title: Duration of the leg in milliseconds
      distance_meters:
        type: integer
        format: int64
        title: Distance of the leg in meters
      line:
        type: string
        title: Name of the line of this public transportation (if relevant)
      origin:
        $ref: '#/definitions/v2commonLocation'
        title: Origin location of the leg
      departure_time_ms:
        type: string
        format: uint64
        title: Time of departure from the start of the leg in milliseconds
      destination:
        $ref: '#/definitions/v2commonLocation'
        title: Destination location of the leg
      arrival_time_ms:
        type: string
        format: uint64
        title: Time of arrival from the start of the leg in milliseconds
      operator:
        type: string
        title: Name of the public transportation operator for this leg
  commonRide:
    type: object
    properties:
      user_id:
        type: string
        title: The ID of the user who created this ride
      ride_id:
        type: string
        title: A unique ride id
      route:
        $ref: '#/definitions/commonRoute'
        title: The ride route
      prebook_pickup_time_ms:
        type: string
        format: uint64
        description: 'Optional. For a pre-booked ride, contains the requested pickup time.'
      booking_estimated_price:
        $ref: '#/definitions/commonPriceEstimate'
        description: Optional. The estimated price at the time of booking.
      constraints:
        $ref: '#/definitions/commonBookingConstraints'
        description: 'Constraints defined at the time of booking, such as number of passengers and suitcases.'
      status_log:
        $ref: '#/definitions/commonRideStatusLog'
        description: 'The ride’s current status, and status history.'
      supplier:
        $ref: '#/definitions/commonSupplier'
        title: Supplier details
      passenger:
        $ref: '#/definitions/commonPassengerDetails'
        title: The passenger details at the time of ride creation
      passenger_note:
        type: string
        description: Optional. A note added by the passenger at the time of ride creation. Can include additional information about the pickup or other special requests.
      driver:
        $ref: '#/definitions/commonDriverDetails'
        description: Optional. This field is only filled when the ride status changes to DRIVER_ASSIGNED and after.
      vehicle:
        $ref: '#/definitions/commonVehicle'
        description: Optional. This field is only filled when the ride status changes to DRIVER_ASSIGNED and after.
      cancellation_policy:
        $ref: '#/definitions/RideOfferCancellationPolicy'
        title: The cancellation policy for the ride
      cancellation_info:
        $ref: '#/definitions/commonCancellationInfo'
        description: 'Optional. When a cancellation occurs, this field contains information about the cancellation.'
      cancellation_request_received_but_not_allowed:
        type: boolean
        format: boolean
        title: 'When a cancellation occurs, this field value is TRUE if cancellation isn''t allowed'
      price:
        $ref: '#/definitions/commonPrice'
        description: Optional. The price of the ride updated by the supplier.
      app_id:
        type: string
        description: Optional. The ID of the app.
    description: |-
      * A ride with a specific supplier. This entity contains relatively static info: driver, vehicle, passengers etc.
      The more dynamic info of the ride, including its progress along the route, is in the entity Ride.

      Below is the lifecycle of the ride:

      PROCESSING [initial status of the ride after CreateRide(), lasting 0-15 sec.]
      PROCESSING --> ACCEPTED [For a pre-booked ride, this status will be active until 30min before the ride.]
      PROCESSING --> REJECTED [The ride has been rejected. Terminal state.]
      ACCEPTED --> PROCESSING [This transition occurs if the supplier cancels a pre-booked ride, and the Marketplace tries to book a new ride.]
      ACCEPTED --> ((NORMAL FLOW)) --> COMPLETE [The ride has been completed. Terminal state.]

      The typical flow is: DRIVER_ASSIGNED --> DRIVER_EN_ROUTE --> AT_PICKUP --> PASSENGER_ON_BOARD --> AT_DROPOFF

      CANCELLED [Terminal state. Can be reached from any other state, if a demander or supplier cancels the ride.]

      NOTE: Once a ride reaches a terminal state, it cannot transition to any other state.
  commonRideLocation:
    type: object
    properties:
      ride_id:
        type: string
        description: The ID of the ride.
      vehicle_location:
        $ref: '#/definitions/commonPoint'
        description: Optional. The current location of the vehicle.
      estimated_pickup_time_ms:
        type: string
        format: uint64
        description: |-
          Optional. The estimated time of pickup, constantly updated until the vehicle is at the pickup location.
          This field will be deprecated soon, please use estimated_pickup_time_seconds instead.
      estimated_dropoff_time_ms:
        type: string
        format: uint64
        description: |-
          Optional. The estimated time of drop-off, constantly updated until the vehicle is at the drop-off location.
          This field will be deprecated soon, please use estimated_dropoff_time_seconds instead.
      last_update_time_ms:
        type: string
        format: uint64
        description: The last time this entity is updated. Used for tracking updates.
      estimated_pickup_time_seconds:
        $ref: '#/definitions/protobufUInt32Value'
        description: Pickup time estimate sent by the supplier.
      estimated_dropoff_time_seconds:
        $ref: '#/definitions/protobufUInt32Value'
        description: Drop-off time estimate sent by the supplier or calculated by Marketplace.
    description: '* Provides the real-time location and progress of the vehicle. Updated every ~10 seconds.'
  commonRideOffer:
    type: object
    properties:
      offer_id:
        type: string
        description: 'A unique offer ID. If this offer is chosen, the client sends this ID when calling CreateRide.'
      supplier:
        $ref: '#/definitions/commonSupplier'
        title: The supplier details
      route:
        $ref: '#/definitions/commonRoute'
        description: The ride route that the supplier suggests.
      estimated_pickup_time_ms:
        type: string
        format: uint64
        description: |-
          Optional. Pickup time estimate sent by the supplier.
          NOTE: This field will be deprecated soon, please use estimated_pickup_time_seconds instead.
      estimated_dropoff_time_ms:
        type: string
        format: uint64
        description: |-
          Optional. Drop-off time estimate sent by the supplier.
          NOTE: This field will be deprecated soon, please use estimated_ride_duration_seconds instead.
      price_estimation:
        $ref: '#/definitions/commonPriceEstimate'
        title: Optional. A price estimate for the ride
      offer_expiration_time_ms:
        type: string
        format: uint64
        title: The offer expiration time (in milliseconds from the time the offer is sent)
      cancellation_policy:
        $ref: '#/definitions/RideOfferCancellationPolicy'
        title: The cancellation policy of the supplier (cancellation allowed or not allowed)
      duration_ms:
        type: string
        format: uint64
        title: Duration of the route in milliseconds
      transfers:
        type: integer
        format: int64
        title: Number of transport changes to reach the destination
      legs:
        type: array
        items:
          $ref: '#/definitions/commonPublicTransportRouteLeg'
        title: 'A list of transportation legs for the route, if this offer is a public transportation offer'
      transit_type:
        $ref: '#/definitions/RideOfferTransitType'
        title: Specifies the transit type of this offer
      estimated_pickup_time_seconds:
        $ref: '#/definitions/protobufUInt32Value'
        description: Optional. Pickup time estimate sent by the supplier.
      estimated_ride_duration_seconds:
        $ref: '#/definitions/protobufUInt32Value'
        title: |-
          Optional. Drop-off time estimate sent by the supplier or calculated by Marketplace.
          This is the time between pickup to dropoff. It does not contain the time to pickup
    description: '* An offer for a ride on the given route.'
  commonRideOfferSortType:
    type: string
    enum:
      - UNKNOWN_SORT_TYPE
      - BY_PRICE
      - BY_ETA
    default: UNKNOWN_SORT_TYPE
    description: |-
      - BY_PRICE: Sort by price (lowest price first)
       - BY_ETA: Sort by arrival time (earliest arrival time first)
    title: '* Types of sort orders for the returned ride offers'
  commonRideOffersResponse:
    type: object
    properties:
      offers:
        type: array
        items:
          $ref: '#/definitions/commonRideOffer'
        title: A list of ride offers
    title: '* A list of available ride offers'
  commonRidePreferences:
    type: object
    properties:
      subscribe_to_messages:
        type: boolean
        format: boolean
        title: Optional. Specifies if messages about the ride will be sent to the passenger. Default is false
    title: '* Preferences of a ride'
  commonRideQuery:
    type: object
    properties:
      from_time_ms:
        type: string
        format: uint64
        description: |-
          Optional. Filters rides according to update or creation time (depending on the sort type).
          When the sort is UPDATE_TIME_ASC, returns rides UPDATED AFTER this time.
          When the sort is UPDATE_TIME_DESC, returns rides UPDATED BEFORE this time.
          When the sort is CREATE_TIME_ASC, returns rides CREATED AFTER this time.
          When the sort is CREATE_TIME_DESC, return rides CREATED BEFORE this time.

          Default value for ascending sort orders is NOW-3 hours.
          Default value for descending sort orders is NOW.
          This value is in UTC (milliseconds since Epoch time)
      limit:
        type: integer
        format: int64
        description: 'Optional. The maximal number of rides to return. When not set, the default is 200.'
      status_filter:
        $ref: '#/definitions/RideQueryRideStatusFilter'
        description: 'Optional. Return only rides with the given status. When not set, rides with all statuses are returned.'
      sort_by:
        $ref: '#/definitions/commonRideQuerySortType'
        description: Optional. Default is UPDATE_TIME_ASC.
    description: |-
      * A query for a list of rides matching the query filters. Used as parameter for GetRides(), which supports pagination, sorting and filtering.

      To fetch the next page of results, copy the pagination field from the response to the RideQuery.from_time_ms field:
      next_request.from_time_ms = response.to_time_ms

      Paging can be used in 2 ways: ENDLESS PAGING and SINGLE SNAPSHOT.

      ENDLESS PAGING - relevant to ascending sort orders.
      In this mode, the client calls GetRides() at regular intervals to receive new or updated records.

      Use the sort order UPDATE_TIME_ASC to receive all changes on rides.
      Use the sort order CREATE_TIME_ASC to receive each ride exactly once (without updates).
      Use the sort order PICKUP_TIME_ASC to query for future rides.

      SINGLE SNAPSHOT - in this mode, the client wants to fetch all the rides currently available, and needs to know what is the last page.
      To identify the last page, set the 'limit' field in the RideQuery, and check if the amount of rides in the result
      is lower than the limit. By default any result with less than 200 rides is the last page.

      NOTE:
      - When the sort is by CREATE_TIME (asc or desc), rides never repeat between pages.
      - When the sort is by UPDATE_TIME (asc or desc), rides in previous pages can appear again (because of updates).
      - When the sort is by PICKUP_TIME (asc or desc), rides in previous pages can appear again, but rarely.
  commonRideQueryResponse:
    type: object
    properties:
      rides:
        type: array
        items:
          $ref: '#/definitions/commonRide'
        title: The list of rides that matched the query
      from_time_ms:
        type: string
        format: uint64
        description: |-
          The earliest update time in this result set. The lowest possible value is current time minus 3 hours.
          This value is in UTC, in milliseconds since Epoch time.
      to_time_ms:
        type: string
        format: uint64
        description: |-
          A time "cursor" for pagination. Contains the last time in the result set, ordered by the sort type.
          To get the next page, pass this value to the next call for GetRides() to field RideQuery.from_time_ms
          This value is in UTC, in milliseconds since Epoch time.
    title: '* A list of rides that matches a ride query'
  commonRideQuerySortType:
    type: string
    enum:
      - UNKNOWN_SORT_TYPE
      - UPDATE_TIME_ASC
      - UPDATE_TIME_DESC
      - CREATE_TIME_ASC
      - CREATE_TIME_DESC
    default: UNKNOWN_SORT_TYPE
    title: |-
      - UNKNOWN_SORT_TYPE: Unknown sort order
       - UPDATE_TIME_ASC: Ascending order of update time
       - UPDATE_TIME_DESC: Descending order of update time
       - CREATE_TIME_ASC: Ascending order of creation time
       - CREATE_TIME_DESC: Descending order of creation time
  commonRideStatusLog:
    type: object
    properties:
      last_update_time_ms:
        type: string
        format: uint64
        description: The last time this entity was updated. Used for tracking updates.
      create_time_ms:
        type: string
        format: uint64
        description: The time the booking was created.
      closed_time_ms:
        type: string
        format: uint64
        description: 'Optional. If relevant, the time the ride was closed (reached a terminal state).'
      is_ride_location_available:
        type: boolean
        format: boolean
        title: 'If this value is TRUE, you can retrieve live updates on the ride’s location by calling GetRideLocation (during statuses DRIVER_ASSIGNED to COMPLETED)'
      current_status:
        $ref: '#/definitions/commonRideStatusUpdateStatus'
        title: The ride’s current status
      prev_statuses:
        type: array
        items:
          $ref: '#/definitions/commonRideStatusUpdate'
        description: 'A list of previous ride statuses, ordered by their timestamp values.'
    title: '* The current status of the ride, including some audit info, and a history of previous statuses'
  commonRideStatusUpdate:
    type: object
    properties:
      status:
        $ref: '#/definitions/commonRideStatusUpdateStatus'
        title: The new ride status
      timestamp_ms:
        type: string
        format: uint64
        title: The time the ride status changed (UNIX Epoch time in milliseconds)
    description: '* A ride status update, and the time it occurred. Used in the status log.'
  commonRideStatusUpdateStatus:
    type: string
    enum:
      - UNKNOWN
      - PROCESSING
      - REJECTED
      - ACCEPTED
      - DRIVER_ASSIGNED
      - DRIVER_EN_ROUTE
      - AT_PICKUP
      - PASSENGER_ON_BOARD
      - AT_DROPOFF
      - COMPLETED
      - CANCELLED
    default: UNKNOWN
    description: |-
      - UNKNOWN: Unknown
       - PROCESSING: Looking for a supplier
       - REJECTED: The supplier cannot fulfill the request. Terminal state.
       - ACCEPTED: A supplier accepted the ride, but a driver is not yet assigned. For a pre-booked ride, this state may last a long while.
       - DRIVER_ASSIGNED: Driver and vehicle are assigned to the ride.
       - DRIVER_EN_ROUTE: Vehicle on its way to pickup.
       - AT_PICKUP: Vehicle at pickup
       - PASSENGER_ON_BOARD: Vehicle on the way, and passenger on board.
       - AT_DROPOFF: Vehicle arrived at drop-off.
       - COMPLETED: Ride finished successfully. Terminal state.
       - CANCELLED: Ride cancelled by supplier or demander. Terminal state.
    title: '* Ride status values'
  commonRoute:
    type: object
    properties:
      pickup:
        $ref: '#/definitions/v2commonLocation'
        description: Mandatory. The route’s pickup location.
      destination:
        $ref: '#/definitions/v2commonLocation'
        description: Mandatory. The route’s destination location.
    title: '*  A route between a start point and an end point'
  commonSupplier:
    type: object
    properties:
      supplier_id:
        type: string
        title: A unique supplier ID
      english_name:
        type: string
        title: 'The name of the supplier, in English'
      local_name:
        type: string
        title: Optional. The name of the supplier in the local language
      logo_url:
        type: string
        title: Optional. A URL pointing to a logo image for the supplier
      phone_number:
        type: string
        title: The supplier’s telephone number
      address:
        type: string
        title: The supplier’s address
    title: '* Ride supplier details'
  commonTransitOptions:
    type: object
    properties:
      max_transfers:
        type: integer
        format: int32
        description: Optional. Maximum number of changes or transfers allowed in a route. Default is unlimited. Range is 0-6.
      max_walking_distance_meters:
        type: integer
        format: int32
        description: Optional. Specifies a maximum walking distance in meters. Default is 2000. Range is 0-6000.
      locale:
        type: string
        description: Optional. The client's locale. Complies with the ISO 639-1 standard and defaults to en.
  commonVehicle:
    type: object
    properties:
      license_plate_number:
        type: string
        title: The vehicle’s license plate number
      vehicle_type:
        $ref: '#/definitions/VehicleVehicleType'
        title: 'The vehicle type (standard, limo, van)'
      make:
        type: string
        title: The vehicle make
      model:
        type: string
        title: The vehicle model
      color:
        type: string
        title: The vehicle color
    title: '* Vehicle details'
  protobufUInt32Value:
    type: object
    properties:
      value:
        type: integer
        format: int64
        description: The uint32 value.
    description: |-
      Wrapper message for `uint32`.

      The JSON representation for `UInt32Value` is JSON number.
  v2commonLocation:
    type: object
    properties:
      point:
        $ref: '#/definitions/commonPoint'
        title: Geo-location (latitude and longitude)
      address:
        $ref: '#/definitions/commonAddress'
        description: Street address.
      free_text:
        type: string
        title: Place name or street address in a free text format
    title: '* A start/end/midpoint location in a ride'
